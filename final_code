#include <Arduino.h>
#include <WiFiEsp.h>
#include <WiFiEspUdp.h>

#ifndef HAVE_HWSERIAL1
#include "SoftwareSerial.h"
SoftwareSerial Serial1(8, 9); // RX, TX
#endif

char ssid[] = "modaldonkbozqu";  //  your network SSID
char pass[] = "kisminlu";        // your network password
int status = WL_IDLE_STATUS;     // the Wifi radio's status

//inisialisasi
int A0_1, A0_2, A0_3, A0_4, A0_5, A0_6, A0_7, A0_8, A0_9, A0_10, A0_11, A0_12, A0_13, A0_14, A0_15, A0_16;
int A0_17, A0_18, A0_19, A0_20, A0_21, A0_22, A0_23, A0_24, A0_25, A0_26, A0_27, A0_28, A0_29, A0_30, A0_31;
int A1_1, A1_2, A1_3, A1_4, A1_5, A1_6, A1_7, A1_8, A1_9, A1_10, A1_11, A1_12, A1_13, A1_14, A1_15, A1_16;
int A1_17, A1_18, A1_19, A1_20, A1_21, A1_22, A1_23, A1_24, A1_25, A1_26, A1_27, A1_28, A1_29, A1_30, A1_31;
int maxA0, maxA1, minA0, minA1, batasA, batasA0, batasA1, errorA0, errorA1, dapat, jarak, data3, data4;
int dataA0, dataA1, stabilA0, stabilA1, data, NA00, NA01, NA10, NA11, data99, langkah, datacase, input = 0;
unsigned long timeA0, timeA0_1, timeA0_2, timeA0_3, timeA0_4, timeA0_5, timeA0_6, timeA0_7, timeA0_8, timeA0_9;
unsigned long timeA0_10, timeA0_11, timeA0_12, timeA0_13, timeA0_14, timeA0_15, timeA0_16, timeA0_17, timeA0_18;
unsigned long timeA1, timeA1_1, timeA1_2, timeA1_3, timeA1_4, timeA1_5, timeA1_6, timeA1_7, timeA1_8, timeA1_9;
unsigned long timeA1_10, timeA1_11, timeA1_12, timeA1_13, timeA1_14, timeA1_15, timeA1_16, timeA1_17, timeA1_18;
unsigned long timeerrorA0_3, timeerrorA0_2, timeerrorA0_1, timeerrorA0, timeerrorA1_3, timeerrorA1_2, timeerrorA1_1;
unsigned long timeerrorA1, timeall, timerA0, timerA1;
float HR, PTT, pembagi, HR_A0, HR_A1, HR_01, PWV, SBP, DBP, PTT1, PTT2, PTT3, HR1, HR2, HR3, PTTall, HRall;
float PTTend, HRend, lolos, jumlah;
String data1, data2, data5, data6, data7;

unsigned int localPort = 8887;
//8887 N32 8886 E210 8885 E155 8884 E169

char packetBuffer[255];          // buffer to hold incoming packet
char ReplyBuffer[] = "ACK";      // a string to send back
char databatasint[255];

WiFiEspUDP Udp;

void setup() {
  Serial.begin(57600); // initialize serial for debugging

tryagain:
  // initialize serial for ESP module
  Serial1.begin(57600);
  // initialize ESP module
  WiFi.init(&Serial1);

  Serial.print("Attempting to Connect to WPA SSID: ");
  Serial.println(ssid);
  // Connect to WPA/WPA2 network
  status = WiFi.begin(ssid, pass);

  // attempt to Connect to WiFi network
  while ( status != WL_CONNECTED) {
    goto tryagain;
  }

  Serial.println("Connected to wifi");
  printWifiStatus();

  Serial.println("\nStarting Connection to server...");
  // if you get a Connection, report back via serial:
  Udp.begin(localPort);

  Serial.print("Listening on port ");
  Serial.println(localPort);
  Serial.println("");

  pinMode(3, OUTPUT);
  pinMode(4, OUTPUT);
  pinMode(5, OUTPUT);

  digitalWrite(4, HIGH);
  digitalWrite(5, HIGH);   // turn the LED on (HIGH is the voltage level)
  delay(3000);             // wait for a second
  digitalWrite(4, LOW);    // turn the LED off by making the voltage LOW
  digitalWrite(5, LOW);
  delay(1000);

  pembagi = 60000000;
  datacase = 1;
}

void loop()
{
  //Kirim data lolos ke Loop awal untuk lab
  //Jika lolos <1 dan waktu lebih dari 15 detik.
  //kalau berhasil, dua led nyala 2 detik"
  //kalau error, kedap kedip tergantung
  //Kirim data lolos ke loop case b untuk dikirim esp

  while (langkah == 0)
  {
geserposisi:

    String data_in0 = MenentukanSetPoint();

    String batasA0_in0 = data_in0.substring(0, 3);
    String batasA1_in0 = data_in0.substring(4, 7);
    int batasA0 = batasA0_in0.toInt();
    int batasA1 = batasA1_in0.toInt();

    /* masuk semua
      Serial.print("batasA0 . batasA1 = ");
      Serial.println(data_in0);
      Serial.print(batasA0);
      Serial.print(" , ");
      Serial.println(batasA1);
    */

belumstabil:
    unsigned long timecase = millis();
    while (millis() - timecase < 30000)
    {
      String data_in1 = MencariPTTdanHR(batasA0, batasA1);

      String PTT_in1 = data_in1.substring(0, 4);
      String HR_in1 = data_in1.substring(5, 7);
      int PTT1 = PTT_in1.toInt();
      int HR1 = HR_in1.toInt();

      String data_in2 = MencariPTTdanHR(batasA0, batasA1);

      String PTT_in2 = data_in2.substring(0, 4);
      String HR_in2 = data_in2.substring(5, 7);
      int PTT2 = PTT_in2.toInt();
      int HR2 = HR_in2.toInt();

      PTT3 = abs(PTT2 - PTT1);
      HR3 = abs(HR2 - HR1);

      if (PTT2 > 0 && PTT3 <= 700 && HR3 <= 7)
      {
        lolos = lolos + 1;
        PTTall = PTTall + PTT2;
        HRall = HRall + HR2;

        Serial.print("lolos filter PTTall , HRall = ");
        Serial.print(PTTall);
        Serial.print(" , ");
        Serial.print(HRall);
        Serial.print(" , ");
        Serial.println(lolos);

        for (int x = 0; x < 5; x++)
        {
          digitalWrite(4, HIGH);
          digitalWrite(5, HIGH);
          delay(1000);
          digitalWrite(4, LOW);
          digitalWrite(5, LOW);
          delay(100);
        }

        goto sudahstabil;
      }
      else
      {
        Serial.println("belum lolos filter");

        PTTend = 0;
        HRend = 0;
        PTTall = 0;
        HRall = 0;
        lolos = 0;

        for (int x = 0; x < 10; x++)
        {
          digitalWrite(4, HIGH);
          digitalWrite(5, HIGH);
          delay(300);
          digitalWrite(4, LOW);
          digitalWrite(5, LOW);
          delay(300);
        }
        goto belumstabil;
      }
    }
sudahstabil:
    langkah = 1;
  }
  Serial.println("Siap menerima perintah");
  while (langkah == 1)
  {
    uint8_t data = Udp.read();
    switch (data)
    {
      case 'a':
        Serial.println("a");
        datacase = 0;
        while (datacase == 0)
        {
          digitalWrite(4, HIGH);
          digitalWrite(5, HIGH);
          digitalWrite(3, HIGH);
          delay(7000);
          digitalWrite(4, LOW);
          digitalWrite(5, LOW);
          digitalWrite(3, LOW);
          delay(7000);
          Serial.println("trigger");
          unsigned long timecasea = millis();
          Udp.beginPacket(Udp.remoteIP(), 9867);
          while (millis() - timecasea < 30000)
          {
            //Serial.println("trigger");
            data5 = String(analogRead(A1));
            data6 = String(analogRead(A0));
            delay(5);
            String data7 = data5 + "." + data6;
            int data_len = data7.length() + 1;
            char data_array[data_len];
            data7.toCharArray(data_array, data_len);
            Udp.write(data_array);
          }
          Udp.endPacket();
          datacase = 1;
          batasA = 0;
        }
        break;

      case 'b':
        Serial.println("b");
        if (batasA == 0)
        {
          String data_in0 = MenentukanSetPoint();
          String batasA0_in0 = data_in0.substring(0, 3);
          String batasA1_in0 = data_in0.substring(4, 7);
          int batasA0 = batasA0_in0.toInt();
          int batasA1 = batasA1_in0.toInt();
          batasA = 1;
        }

        pembagi = 60000000;
        unsigned long timecaseb = millis();
        while (batasA == 1)
        {
          if (millis() - timecaseb > 30000)
          {
            batasA = 0;
          }
          String data_in = MencariPTTdanHR(batasA0, batasA1);

          String PTT_in1 = data_in.substring(0, 5);
          String HR_in1 = data_in.substring(6, 9);
          int PTT1 = PTT_in1.toInt();
          int HR1 = HR_in1.toInt();

          String PTT_in2 = data_in.substring(0, 5);
          String HR_in2 = data_in.substring(6, 8);
          int PTT2 = PTT_in2.toInt();
          int HR2 = HR_in2.toInt();

          String PTT_in3 = data_in.substring(0, 4);
          String HR_in3 = data_in.substring(5, 8);
          int PTT3 = PTT_in3.toInt();
          int HR3 = HR_in3.toInt();

          String PTT_in4 = data_in.substring(0, 4);
          String HR_in4 = data_in.substring(5, 7);
          int PTT4 = PTT_in4.toInt();
          int HR4 = HR_in4.toInt();

          if (1500 < PTT1 && PTT1 < 25000 && 50 < HR1 && HR1 < 130)
          {
            PTT = PTT1;
            HR = HR1;
          }
          else if (1500 < PTT2 && PTT2 < 25000 && 50 < HR2 && HR2 < 130)
          {
            PTT = PTT2;
            HR = HR2;
          }
          else if (1500 < PTT3 && PTT3 < 25000 && 50 < HR3 && HR3 < 130)
          {
            PTT = PTT3;
            HR = HR3;
          }
          else if (1500 < PTT4 && PTT4 < 25000 && 50 < HR4 && HR4 < 130)
          {
            PTT = PTT4;
            HR = HR4;
          }

          if (PTT > 0 && HR > 0)
          {
            String data1 = String (int (PTT));
            String data2 = String (int (HR));
            String data3 = data1 + "." + data2;
            int data_len = data3.length() + 1;
            char data_array[data_len];
            data3.toCharArray(data_array, data_len);
            Serial.print("filter2 PTT.HR = ");
            Serial.println(data_array);

            Udp.beginPacket(Udp.remoteIP(), 9867); //Remote Port
            //9867 N32 9866 E210 9865 E155 9864 E169
            Udp.write(data_array);
            Udp.endPacket();
            //break;
          }
        }

    }
  }
}

void printWifiStatus()
{
  // print the SSID of the network you're attached to:
  Serial.print("SSID: ");
  Serial.println(WiFi.SSID());

  // print your WiFi shield's IP address:
  IPAddress ip = WiFi.localIP();
  Serial.print("IP Address: ");
  Serial.println(ip);

  // print the received signal strength:
  long rssi = WiFi.RSSI();
  Serial.print("signal strength (RSSI):");
  Serial.print(rssi);
  Serial.println(" dBm");
}

String MenentukanSetPoint()
{
  digitalWrite(3, HIGH);
  delay(7000);
  digitalWrite(3, LOW);
  delay(17000);
  minA0 = 1023;
  maxA0 = 0;
  minA1 = 1023;
  maxA1 = 0;
  for (int x = 0; x < 10000; x++)
  {
    delayMicroseconds(100);

    A0_1 = analogRead(A1);
    maxA0 = max(A0_1, maxA0);
    minA0 = min(A0_1, minA0); // ?

    A1_1 = analogRead(A0);
    maxA1 = max(A1_1, maxA1);
    minA1 = min(A1_1, minA1);

  }
  batasA0 = ((3.5 * (maxA0 - minA0)) / 10) + minA0;
  batasA1 = ((3.5 * (maxA1 - minA1)) / 10) + minA1;
  Serial.println(batasA0);
  Serial.println(batasA1);
  Serial.println(maxA0);
  Serial.println(minA0);
  Serial.println(maxA1);
  Serial.println(minA1);
  timeerrorA0 = 0;
  timeerrorA1 = 0;
  timeA0 = micros();
  timeA1 = micros();
  batasA = 1;

  String data1 = String (int (batasA0));
  String data2 = String (int (batasA1));
  //String data3 = String (int (lolos));
  String data4 = data1 + "." + data2;
  int data_len = data4.length() + 1;
  char data_array[data_len];
  data4.toCharArray(data_array, data_len);
  Serial.print("batasA0 . batasA1 = ");
  Serial.println(data_array);
  String data(data_array);
  return data;
}

String MencariPTTdanHR(int x, int y)
{
  pembagi = 60000000;
  datacase = 0;
  timeA0 = micros();
  timeA1 = micros();
  batasA0 = x;
  batasA1 = y;
  unsigned long timecaseb = millis();
  while (datacase == 0)
  {
    if (millis() - timecaseb > 30000)
    {
      datacase = 1;
      batasA = 0;
    }

    timeall = micros();
    A0_31 = A0_30;
    A0_30 = A0_29;
    A0_29 = A0_28;
    A0_28 = A0_27;
    A0_27 = A0_26;
    A0_26 = A0_25;
    A0_25 = A0_24;
    A0_24 = A0_23;
    A0_23 = A0_22;
    A0_22 = A0_21;
    A0_21 = A0_20;
    A0_20 = A0_19;
    A0_19 = A0_18;
    A0_18 = A0_17;
    A0_17 = A0_16;
    A0_16 = A0_15;
    A0_15 = A0_14;
    A0_14 = A0_13;
    A0_13 = A0_12;
    A0_12 = A0_11;
    A0_11 = A0_10;
    A0_10 = A0_9;
    A0_9 = A0_8;
    A0_8 = A0_7;
    A0_7 = A0_6;
    A0_6 = A0_5;
    A0_5 = A0_4;
    A0_4 = A0_3;
    A0_3 = A0_2;
    A0_2 = A0_1;
    A0_1 = analogRead(A1);
    timeA0_16 = timeA0_15;
    timeA0_15 = timeA0_14;
    timeA0_14 = timeA0_13;
    timeA0_13 = timeA0_12;
    timeA0_12 = timeA0_11;
    timeA0_11 = timeA0_10;
    timeA0_10 = timeA0_9;
    timeA0_9 = timeA0_8;
    timeA0_8 = timeA0_7;
    timeA0_7 = timeA0_6;
    timeA0_6 = timeA0_5;
    timeA0_5 = timeA0_4;
    timeA0_4 = timeA0_3;
    timeA0_3 = timeA0_2;
    timeA0_2 = timeA0_1;
    timeA0_1 = micros();

    A1_31 = A1_30;
    A1_30 = A1_29;
    A1_29 = A1_28;
    A1_28 = A1_27;
    A1_27 = A1_26;
    A1_26 = A1_25;
    A1_25 = A1_24;
    A1_24 = A1_23;
    A1_23 = A1_22;
    A1_22 = A1_21;
    A1_21 = A1_20;
    A1_20 = A1_19;
    A1_19 = A1_18;
    A1_18 = A1_17;
    A1_17 = A1_16;
    A1_16 = A1_15;
    A1_15 = A1_14;
    A1_14 = A1_13;
    A1_13 = A1_12;
    A1_12 = A1_11;
    A1_11 = A1_10;
    A1_10 = A1_9;
    A1_9 = A1_8;
    A1_8 = A1_7;
    A1_7 = A1_6;
    A1_6 = A1_5;
    A1_5 = A1_4;
    A1_4 = A1_3;
    A1_3 = A1_2;
    A1_2 = A1_1;
    A1_1 = analogRead(A0);
    timeA1_16 = timeA1_15;
    timeA1_15 = timeA1_14;
    timeA1_14 = timeA1_13;
    timeA1_13 = timeA1_12;
    timeA1_12 = timeA1_11;
    timeA1_11 = timeA1_10;
    timeA1_10 = timeA1_9;
    timeA1_9 = timeA1_8;
    timeA1_8 = timeA1_7;
    timeA1_7 = timeA1_6;
    timeA1_6 = timeA1_5;
    timeA1_5 = timeA1_4;
    timeA1_4 = timeA1_3;
    timeA1_3 = timeA1_2;
    timeA1_2 = timeA1_1;
    timeA1_1 = micros();

    //kalau kedip A0 dlu lama baru A1 apa itu yah
    while (micros() - timeA1_1 < 2400)
    {
      delayMicroseconds(10);
    }

    if (A0_1 > batasA0) //kalau batasnya kekurangan / kelebihan -> direset
    {
      if (A0_1 < A0_6 && A0_3 <= A0_4 && A0_6 < A0_11 && A0_8 <= A0_9 && A0_11 < A0_16 && A0_13 <= A0_14 && A0_16 > A0_21 && A0_18 >= A0_19 && A0_21 > A0_26 && A0_23 >= A0_24 && A0_26 > A0_31 && A0_28 >= A0_29)
      {
        NA00 = NA01;
        NA01 = A0_5;
        dataA0 = dataA0 + 1;
        stabilA0 = stabilA0 + 1;
        if (stabilA0 > 1 && NA01 < NA00)
        {
          timeA0 = timeA0;
          stabilA0 = 1;
        }
        else
        {
          stabilA0 = 1;
          if (A0_21 < A0_20 && A0_20 == A0_16 || A0_17 < A0_16 && A0_16 > A0_15)
          {
            timeA0 = timeA0_16;
          }

          else if (A0_19 < A0_18 && A0_18 == A0_16 || A0_17 < A0_16 && A0_16 == A0_14)
          {
            timeA0 = timeA0_15;
          }

          else if (A0_17 < A0_16 && A0_16 == A0_15 || A0_20 < A0_19 && A0_19 == A0_16)
          {
            timeA0 = ((timeA0_15 - timeA0_16) / 2) + timeA0_16;
          }

          else if (A0_17 < A0_16 && A0_16 == A0_12)
          {
            timeA0 = timeA0_14;
          }

          else
          {
            timeA0 = ((timeA0_14 - timeA0_15) / 2) + timeA0_15;
          }
        }
      }
    } //pantes disini

    if (A1_1 > batasA1 && stabilA0 > 0)
    {
      if (A1_1 < A1_6 && A1_3 <= A1_4 && A1_6 < A1_11 && A1_8 <= A1_9 && A1_11 < A1_16 && A1_13 <= A1_14 && A1_16 > A1_21 && A1_18 >= A1_19 && A1_21 > A1_26 && A1_23 >= A1_24 && A1_26 > A1_31 && A1_28 >= A1_29)
      {
        NA10 = NA11;
        NA11 = A1_5;
        dataA1 = dataA1 + 1;
        stabilA1 = stabilA1 + 1;
        if (stabilA1 > 1 && NA11 < NA10)
        {
          //timeA1_3 = timeA1_3;
          timeA1 = timeA1; //untuk PTT
          stabilA1 = 1;
        }
        else
        {
          stabilA1 = 1;
          if (A1_21 < A1_20 && A1_20 == A1_16 || A1_17 < A1_16 && A1_16 > A1_15)
          {
            timeA1 = timeA1_16;
          }

          else if (A1_19 < A1_18 && A1_18 == A1_16 || A1_17 < A1_16 && A1_16 == A1_14)
          {
            timeA1 = timeA1_15;
          }

          else if (A1_17 < A1_16 && A1_16 == A1_15 || A1_20 < A1_19 && A1_19 == A1_16)
          {
            timeA1 = ((timeA1_15 - timeA1_16) / 2) + timeA1_16;
          }

          else if (A1_17 < A1_16 && A1_16 == A1_12)
          {
            timeA1 = timeA1_14;
          }

          else
          {
            timeA1 = ((timeA1_14 - timeA1_15) / 2) + timeA1_15;
          }
        }
      }
    }

    //2. mengirim nilai bila benar
    if (stabilA0 == 1 && stabilA1 == 1 && A0_1 < batasA0 && A1_1 < batasA1)
    {
      timeA1_18 = timeA1_17;
      timeA1_17 = timeA1;

      timeA0_18 = timeA0_17;
      timeA0_17 = timeA0;

      if (timeA1_18 > 0 && timeA0 > 0 || timeA0_18 > 0 && timeA0 > 0)
      {
        PTT = ((timeA1 - timeA0) / 10) * 1;

        HR_A0 = pembagi / (timeA0_17 - timeA0_18);
        HR_A1 = pembagi / (timeA1_17 - timeA1_18);
        if (50 > HR_A0 || HR_A0 > 120)
        {
          HR = HR_A1;
        }
        if (50 > HR_A1 || HR_A1 > 120)
        {
          HR = HR_A0;
        }
        else
        {
          if (HR_01 == 0)
          {
            HR = min(HR_A0, HR_A1);
          }
          else if (abs(HR_A0 - HR_01) < abs(HR_A1 - HR_01))
          {
            HR = HR_A0;
          }
          else
          {
            HR = HR_A1;
          }
        }
        HR_01 = HR;
      }

      Serial.print("PTT.HR = ");
      Serial.print(PTT);
      Serial.print(" , ");
      Serial.println(HR);

      if (1500 < PTT && PTT < 25000 && 50 < HR && HR < 130)
      {
        String data1 = String (int (PTT));
        String data2 = String (int (HR));
        String data4 = data1 + "." + data2;
        int data_len = data4.length() + 1;
        char data_array[data_len];
        data4.toCharArray(data_array, data_len);
        Serial.print("filter2 PTT.HR = ");
        Serial.println(data_array);
        String data(data_array);

        dataA0 = 0;
        dataA1 = 0;
        stabilA0 = 0;
        stabilA1 = 0;
        PTT = 0;
        HR = 0;
        HR_A0 = 0;
        HR_A1 = 0;
        errorA0 = 0;
        errorA1 = 0;
        NA00 = 0;
        NA01 = 0;
        NA10 = 0;
        NA11 = 0;
        timeA0 = timeall;
        timeA1 = timeall;
        timeerrorA0_3 = 0;
        timeerrorA0_2 = 0;
        timeerrorA0_1 = 0;
        timeerrorA0 = 0;
        timeerrorA1_3 = 0;
        timeerrorA1_2 = 0;
        timeerrorA1_1 = 0;
        timeerrorA1 = 0;
        datacase = 1;
        return data;
      }
      else
      {
        PTT3 = 0;
        PTT2 = 0;
        PTT1 = 0;
        HR3 = 0;
        HR2 = 0;
        HR1 = 0;
        PTTend = 0;
        HRend = 0;
        PTTall = 0;
        HRall = 0;
        lolos = 0;
        dataA0 = 0;
        dataA1 = 0;
        stabilA0 = 0;
        stabilA1 = 0;
        NA00 = 0;
        NA01 = 0;
        NA10 = 0;
        NA11 = 0;
        //timeA1_4 = 0;
        //timeA1_3 = 0;
        timeA0 = timeall;
        timeA1 = timeall;
        PTT = 0;
        HR = 0;
        HR_A0 = 0;
        HR_A1 = 0;
        dapat = 0;
      }
    }

    else if (dataA0 == 1 && dataA1 == 0 && timeall - timeA0 > 500000 && errorA0 == 0 && timeerrorA0_3 < 15) //ngga ada reset lagi
    {
      dataA0 = 0;
      //dataA1 = 0;
      NA00 = 0;
      NA01 = 0;
      NA10 = 0;
      NA11 = 0;
      PTT = 0;
      HR = 0;
      timeerrorA0_3 = timeerrorA0_3 + 1;
    }

    else if (dataA0 == 0 && dataA1 == 1 && timeall - timeA1 > 500000 && errorA1 == 0 && timeerrorA1_3 < 15)
    {
      dataA1 = 0;
      NA00 = 0;
      NA01 = 0;
      NA10 = 0;
      NA11 = 0;
      PTT = 0;
      HR = 0;
      timeerrorA1_3 = timeerrorA1_3 + 1;
    }

    else if (dataA0 > 1 && dataA1 >= 1 && timeall - timeA0 > 500000 || dataA0 >= 1 && dataA1 > 1 && timeall - timeA1 > 500000)
    {
      dataA0 = 0;
      dataA1 = 0;
      stabilA0 = 0;
      stabilA1 = 0;
      NA00 = 0;
      NA01 = 0;
      NA10 = 0;
      NA11 = 0;
      PTT = 0;
      HR = 0;
    }

    //3. bila error
    if (dataA0 > 9 && errorA0 == 0)
    {
      timeerrorA0_2 = timeerrorA0_1;
      timeerrorA0_1 = millis();
      timeerrorA0 = (timeerrorA0_1 - timeerrorA0_2) + timeerrorA0;
      dataA0 = 0;
      PTT = 0;
      HR = 0;
      if (timeerrorA0_2 == 0)
      {
        timeerrorA0 = 0;
      }
      else if (timeerrorA0 > 7000  && timeerrorA0_2 > 0)
      {
        timeerrorA0_2 = 0;
        timeerrorA0_1 = 0;
        timeerrorA0 = 0;
        errorA0 = 1;
      }
      Serial.print("PT2.1");
    }

    else if (dataA0 > 9 && errorA0 == 1)
    {
      timeerrorA0_2 = timeerrorA0_1;
      timeerrorA0_1 = millis();
      timeerrorA0 = (timeerrorA0_1 - timeerrorA0_2) + timeerrorA0;
      dataA0 = 0;
      PTT = 0;
      HR = 0;
      if (timeerrorA0_2 == 0)
      {
        timeerrorA0 = 0;
      }
      else if (timeerrorA0 > 7000  && timeerrorA0_2 > 0)
      {
        timeerrorA0_2 = 0;
        timeerrorA0_1 = 0;
        timeerrorA0 = 0;
        errorA0 = 2;
        timeerrorA0 = 0;
        timeA0 = micros();
      }
      Serial.print("PT22");
    }

    else if (dataA0 > 9 && errorA0 == 2)
    {

      timeerrorA0_2 = timeerrorA0_1;
      timeerrorA0_1 = millis();
      timeerrorA0 = (timeerrorA0_1 - timeerrorA0_2) + timeerrorA0;
      dataA0 = 0;
      PTT = 0;
      HR = 0;
      if (timeerrorA0_2 == 0)
      {
        timeerrorA0 = 0;
      }
      else if (timeerrorA0 > 7000  && timeerrorA0_2 > 0)
      {
        for (int x = 0; x < 15; x++)
        {
          errorA0 = 0;
          digitalWrite(4, HIGH);
          delay(200);
          digitalWrite(4, LOW);
          delay(200);
          timeerrorA0_2 = 0;
          timeerrorA0_1 = 0;
          timeerrorA0 = 0;
          timeA0 = micros();
          datacase = 1;
          batasA = 0;
        }
      }
      Serial.print("PT23");
    }

    else if (timeall - timeA0 > 7000000)
    {
      minA0 = 1023;
      maxA0 = 0;
      minA1 = 1023;
      maxA1 = 0;
      if (errorA0 == 0)
      {
        errorA0 = 3;
        timeA0 = micros();
      }
      else if (errorA0 == 3)
      {
        for (int x = 0; x < 3; x++)
        {
          errorA0 = 0;
          digitalWrite(4, HIGH);
          delay(1000);
          digitalWrite(4, LOW);
          delay(1000);
          timeA0 = micros();
          datacase = 1;
          batasA = 0;
        }
      }
      Serial.print("PT24");
    }

    //batas error A0 dengan A1
    if (dataA1 > 9 && errorA1 == 0)
    {
      timeerrorA1_2 = timeerrorA1_1;
      timeerrorA1_1 = millis();
      timeerrorA1 = (timeerrorA1_1 - timeerrorA1_2) + timeerrorA1;
      dataA1 = 0;
      PTT = 0;
      HR = 0;
      if (timeerrorA1_2 == 0)
      {
        timeerrorA1 = 0;
      }
      else if (timeerrorA1 > 7000 && timeerrorA1_2 > 0)
      {
        timeerrorA1_2 = 0;
        timeerrorA1_1 = 0;
        timeerrorA1 = 0;
        errorA1 = 1;
      }
      Serial.print("PT25");
    }

    else if (dataA1 > 9 && errorA1 == 1)
    {
      timeerrorA1_2 = timeerrorA1_1;
      timeerrorA1_1 = millis();
      timeerrorA1 = (timeerrorA1_1 - timeerrorA1_2) + timeerrorA1;
      dataA1 = 0;
      PTT = 0;
      HR = 0;
      if (timeerrorA1_2 == 0)
      {
        timeerrorA1 = 0;
      }
      else if (timeerrorA1 > 7000 && timeerrorA1_2 > 0)
      {
        timeerrorA1_2 = 0;
        timeerrorA1_1 = 0;
        timeerrorA1 = 0;
        errorA1 = 2;
        timeerrorA1 = 0;
        timeA1 = micros();
        Serial.println("timeA1 di reset");
      }
      Serial.print("PT26");
    }

    else if (dataA1 > 9 && errorA1 == 2)
    {

      timeerrorA1_2 = timeerrorA1_1;
      timeerrorA1_1 = millis();
      timeerrorA1 = (timeerrorA1_1 - timeerrorA1_2) + timeerrorA1;
      dataA1 = 0;
      PTT = 0;
      HR = 0;
      if (timeerrorA1_2 == 0)
      {
        timeerrorA1 = 0;
      }
      else if (timeerrorA1 > 7000 && timeerrorA1_2 > 0)
      {
        for (int x = 0; x < 15; x++)
        {
          errorA1 = 0;
          digitalWrite(4, HIGH);
          delay(200);
          digitalWrite(4, LOW);
          delay(200);
          timeA1 = micros();
          datacase = 1;
          batasA = 0;
          timeerrorA1_2 = 0;
          timeerrorA1_1 = 0;
          timeerrorA1 = 0;
        }
      }
      Serial.print("PT27");
    }

    //error tak ada peak
    else if (timeall - timeA1 > 7000000)
    {
      //timerA1 = millis();
      minA0 = 1023;
      maxA0 = 0;
      minA1 = 1023;
      maxA1 = 0;
      if (errorA1 == 0)
      {
        errorA1 = 3;
        timeA1 = micros();
        //break;
      }
      else if (errorA1 == 3)
      {
        for (int x = 0; x < 3; x++)
        {
          errorA1 = 0;
          digitalWrite(4, HIGH);
          delay(1000);
          digitalWrite(4, LOW);
          delay(1000);
          timeA1 = micros();
          datacase = 1;
          batasA = 0;
        }
      }
    }
  }
}
